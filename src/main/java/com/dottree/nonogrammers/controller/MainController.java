package com.dottree.nonogrammers.controller;

import com.dottree.nonogrammers.dao.MainMapper;
import com.dottree.nonogrammers.dao.UserMapper;
import com.dottree.nonogrammers.domain.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;

import org.apache.ibatis.binding.BindingException;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.asynchttpclient.AsyncHttpClient;
import org.asynchttpclient.DefaultAsyncHttpClient;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
@Controller
@Slf4j
public class MainController {
    final MainMapper mdao;
    private final UserMapper userMapper;
    public MainController(MainMapper mdao, UserMapper userMapper) {
        this.mdao = mdao;
        this.userMapper = userMapper;
    }

    //사용자 아이디, 노노아이디로 노노 개방
  /*  @RequestMapping("/api/nono/{userId}/{nonoId}")
    public ModelAndView showNono(UserNonoDTO unDTO){
        log.info("showNono start !!!!!!!");
        ModelAndView mav = new ModelAndView();
        if(mdao.selectUserFromUserNono(unDTO) == 0){
            mdao.insertUserNono(unDTO,1);
            mdao.insertUserSolvedCount(unDTO);
        }
        return mav;
    }*/

    //엑셀파일 픽셀마다 데이터 뽑기
    @GetMapping("/api/dot")
    public String dotView() throws IOException {
        StringBuilder sb = new StringBuilder();
        int nonoId = 1;
        DotDTO dDTO = new DotDTO();
        String[] names = {"Looney Tunes","daram","Dogi","dottux","dragon","LisaSimpson","Mario2","minions","gara","curby","boo","krong","leo","papa","piyo","trapixel","cyon","bagi"};
        for(int i=15; i< names.length; i++) {
            // Load the Excel file into Workbook to be converted to arrayC:\Users\COM\Downloads
            System.out.println(names[i]);
            FileInputStream fis = new FileInputStream("/Users/COM/Downloads/exlels/" + names[i] + ".xlsx");
            Workbook excelWorkbookToArray = new XSSFWorkbook(fis);

//        for (int i=0; i<3; i++){
            // Get the reference to the first sheet of the workbook for conversion to array
            Sheet worksheet = excelWorkbookToArray.getSheetAt(0);
            int rowCnt = worksheet.getLastRowNum() + 1; // getLastRowNum returns 0-based index, so we add 1.
            int colCnt = worksheet.getRow(0).getLastCellNum(); // Assuming all rows have same number of columns.
            System.out.println("rowCnt: " + rowCnt);
            System.out.println("colCnt: " + colCnt);
            for (int j = 0; j < rowCnt; j++) {
                Row row = worksheet.getRow(j);
                for (int k = 0; k < colCnt; k++) {
                    Cell cell = row.getCell(k); //i행의 j열 셀
                    Color color = cell.getCellStyle().getFillForegroundColorColor(); // 셀의
                    if (color instanceof XSSFColor) {
                        XSSFColor xssfColor = (XSSFColor) color;
                        String d = xssfColor.getARGBHex().substring(2);
                        dDTO.setNonoId(i+1);
                        dDTO.setColor(d);
                        mdao.insertDotsInDot(dDTO);
                       // System.out.print(d + ",");
                    }
                }
                //System.out.println();
            }
            System.out.println("No. Of Rows Exported in array: " + rowCnt);
//        }
        fis.close();
        }
        return null;
    }

    //화면에 노노 출력.
    @RequestMapping("/nonodots/{userId}/{nonoId}/{baekjoonId}")
    public ModelAndView nonodots(UserNonoDTO unDTO,@PathVariable("baekjoonId")String beakjoonId){
        log.info("nonodots start!!!!!!!!");
        log.info("노노 조회 시 백준 아이디 : " + beakjoonId);
        UserDotDTO udDTO = new UserDotDTO();
        udDTO.setUserId(unDTO.getUserId());
        udDTO.setNonoId(unDTO.getNonoId());
        //노노개방
        if(mdao.selectUserFromUserNono(unDTO) == 0){
            log.info("insert UserNono start!!!!!!!!!");
            mdao.insertUserNono(unDTO);
        }
        if(mdao.selectUserSolvedCount(udDTO) == null){
            mdao.insertUserSolvedCount(unDTO.getUserId(),getUserBaekData(beakjoonId)); // 백준 회원가입이 되어있어야함
        }

        log.info("nonoId : " + unDTO.getNonoId());
        int cnt = 0;
        List<List<DotDTO>> totalRowList = new ArrayList<>(); // 모든 도트의 정보를 담을 이중ArrayList. 행,열로 나뉘어 있음.

        ModelAndView mav = new ModelAndView(); // 모델 생성,nonodot으로 이동
        mav.setViewName("nonodots");

        List<DotDTO> nList = mdao.selectAllDot(unDTO.getNonoId()); // 모든 도트 dot테이블에서 가져옴

        NonoDTO allUrls = mdao.selectAllallProblemToStr(unDTO.getNonoId()); // 모든 문제Url nono테이블에서 가져옴
        String [] urlAry = allUrls.getAllProblemToStr().split(","); // 쉼표 떼고 배열에 저장
        System.out.println(urlAry[urlAry.length-1]);
        int row = nList.size()/32; // totalRowList에 모든 도트 정보 담음
        log.info("row : "+row);
        List<DotDTO> singleRowList = null;
        for(int i=0; i<row; i++){
            singleRowList = new ArrayList<>();
            for(int j=0; j<32; j++){
                singleRowList.add(nList.get(cnt));
//                    log.info(i + "행 " + j + "열");
                //System.out.print(nList.get(cnt).getColor()+",");
                cnt++;
            }
            //System.out.println();
            totalRowList.add(singleRowList);
        }

        //Progress bar //////////////////////////////////////////////////////////////////////////////
        float ssn = mdao.selectAllDotCount(udDTO.getNonoId());
        float sadc = mdao.selectSolvedNumber(udDTO);
        int progress = (int) (sadc*100/ssn);
        log.info(getClass().getName() + ": 모든 도트의 수 : "+ ssn);
        log.info(getClass().getName()+": 해결한 도트의 수 : "+ sadc);
        log.info(getClass().getName() + ": 프로그래스 바 :" + progress);
        mav.addObject("progress",progress);

        ///////////////////////////////////////////////////////////////////////////////////////
        mav.addObject("dotList", totalRowList);
        mav.addObject("urlAry", urlAry);
        mav.addObject("baekjoonUserIdStatus", "1");
        mav.addObject("nonoId",unDTO.getNonoId());

//        System.out.println(totalRowList.get(1).size());
//            for(int i=0; i<48; i++){
//                for( int j = 0; j < totalRowList.get(0).size(); j++) {
//                    System.out.print(totalRowList.get(i).get(j).getColor()+" ,");
//                }
//            }
        return mav;
    }

    // 문제번호 가져오기.
    @RequestMapping("/api/geturls/{nonoId}")
    @ResponseBody
    public void geturls(@PathVariable("nonoId")int nonoId){
        NonoDTO allUrls = mdao.selectAllallProblemToStr(nonoId);
        String [] urlAry = allUrls.getAllProblemToStr().split(",");

        for (int i=0; i< urlAry.length; i++){
            System.out.println(urlAry[i]);
        }
    }

    //사용자 검색해서 푼 문제수 출력
    @RequestMapping("/api/solvednum")
    @ResponseBody
    public void solvednum() throws IOException {
        AsyncHttpClient client = new DefaultAsyncHttpClient();
        String[] responseBody = new String[1];
        client.prepare("GET", "https://solved.ac/api/v3/user/show?handle=tjdtndlwkd")
                .setHeader("Accept", "application/json")
                .execute()
                .toCompletableFuture()
                .thenAccept(response -> {
                    responseBody[0] = response.getResponseBody();
                    //System.out.println(responseBody[0]);
                })
                .join();
        client.close();

        ObjectMapper mapper = new ObjectMapper();
        JsonNode jsonNode = mapper.readTree(responseBody[0]);

        System.out.println(jsonNode.get("solvedCount"));  // 출력: John
        System.out.println(jsonNode.get("handle"));

    }

    //문제 레벨 별 문제 번호들 저장 성공
    @RequestMapping("/api/missionlevel/{level}")
    @ResponseBody
    public void solvednum(@PathVariable("level")int level) throws IOException {
        //레벨 별 문제수 가져오기, 리스트에 저장
        int cntPerLevel = getNumPerLevel(level);
        List<String> totalProblemList = new ArrayList<>();
        System.out.println(cntPerLevel);
        for (int i=1; i<cntPerLevel/50; i++){
            totalProblemList.addAll(insertproblems(i, level));

        }
        System.out.println(totalProblemList);
    }

    //사용자 문 문제들 가져오기
//    @RequestMapping("/reloadinfo")
//    @ResponseBody



    //백준 아이디로 전적갱신  / 이전에 푼 문제 수 저장 필요함.
    @RequestMapping("/api/updateCheck/{baekjoonId}/{userId}/{nonoId}")
    @ResponseBody
        public int updateSolved(@PathVariable("baekjoonId")String baekjoonId, @PathVariable("userId")int userId, @PathVariable("nonoId")int nonoId){
        log.info(getClass().getName() + "updateSolved 시작!!!!!!!!!!!!");
        int result = 0;

        UserDotDTO udDTO = new UserDotDTO();
        udDTO.setNonoId(nonoId);
        udDTO.setUserId(userId);

        int userSolvedCnt = mdao.selectUserSolvedCount(udDTO);
        int baekjoonSolvedCnt = getUserBaekData(baekjoonId);

        log.info(getClass().getName()+" 해결해온 문제의 수 "+userSolvedCnt);
        log.info(getClass().getName()+" 지금 해결한 문제의 수 "+baekjoonSolvedCnt);
        if(userSolvedCnt < baekjoonSolvedCnt){
            result = 1;
            UserSolvedCountDTO uscDTO = new UserSolvedCountDTO();
            uscDTO.setUserId(userId);
            uscDTO.setSolvedCount(userSolvedCnt+1);
            mdao.updateUserSolvedCount(userId,baekjoonSolvedCnt);
            mdao.selectUserSolvingRow(udDTO);
        }
        log.info("해결한 문제의 수 " + userSolvedCnt);

        return result;
    }

    //userdot에 해결한 dots들 삽입.
    @ResponseBody
    @RequestMapping(value =("/api/updateUserDot/{userId}/{nonoId}"),method = RequestMethod.POST, produces = "application/json; charset=utf-8")
    public String updateUserDot(@RequestBody String jsonString, @PathVariable("userId") int userId, @PathVariable("nonoId")int nonoId) throws JsonProcessingException {
        log.info("updateUserDot 시작!!!!!!!");
        UserDotDTO udDTO = new UserDotDTO();
        String msg ="";

        System.out.println("받아온 JSON 형식의 String : "+jsonString);

        ObjectMapper getNumMapper = new ObjectMapper();
        JsonNode getNumJsonNode = getNumMapper.readTree(jsonString);

        udDTO.setDotId(getNumJsonNode.get(0).get("dotId").asInt());
        udDTO.setUserId(userId);
        udDTO.setNonoId(nonoId);
        log.info(String.valueOf(udDTO.getDotId()));
        try {
            if(mdao.selectIsDotsSolved(udDTO).getDotId() == udDTO.getDotId()){
                log.info("중복된 userDotInsert 처리.");//뇌정지..
                msg = "이미 푼 문제여서 실패~";
            }


        }catch (NullPointerException e){
            log.info("에러메세지 : " + e.getMessage());
            for (int i = 0; i < getNumJsonNode.size(); i++) {
                udDTO.setDotId(getNumJsonNode.get(i).get("dotId").asInt());
                udDTO.setUserId(userId);
                udDTO.setNonoId(nonoId);
                mdao.insertUserDot(udDTO);
            }
            mdao.resetUserSolvingRow(udDTO);
            msg = "성공~";
        }
        StringBuilder sb = new StringBuilder();
        sb.append("redirect:/nonodots/").append(userId).append("/").append(nonoId);
        return msg;
    }
    //사용자가 해결중인 문제의 행 설정
    @RequestMapping("/api/updateSolvingRow/{userId}/{nonoId}/{solvingRow}")
    @ResponseBody
    public void updateSolvingRow(UserSolvingRowDTO usrDTO){
        log.info("updateSolvingRow start !!!");
        log.info("userSolvingDTO solvingRow : " + usrDTO.getSolvingRow());
        UserDotDTO udDTO = new UserDotDTO();
        udDTO.setUserId(usrDTO.getUserId());
        udDTO.setNonoId(usrDTO.getNonoId());
        log.info("풀고있는 행 변경 : UserId : " + usrDTO.getUserId());
        log.info("풀고있는 행 변경 : nonoId : " + udDTO.getNonoId());
        try {
            mdao.selectUserSolvingRow(udDTO);
        }catch (BindingException e){
            log.info(getClass().getName()+": BindingException 발생 : " + e.getMessage());
            mdao.insertUserSolvingRow(usrDTO);
//            try {
//                log.info(e.getMessage());
//
//
//            }catch (SQLIntegrityConstraintViolationException e1){
//                log.info(getClass().getName()+"유니크 중복 발생" + e1.getMessage());
//            }

        }

        mdao.updateUserSolvingRow(usrDTO);

    }
    //사용자가 현재 풀고있는 행 조회. 나중에 /nonodots랑 합쳐야 될 듯.
    @RequestMapping("/api/selectSolvingRow/{userId}/{nonoId}")
    @ResponseBody
    public int selectSolvingRow(UserDotDTO udDTO){
        log.info(getClass().getName()+"selectSolvingRow start!!");
        int result = 0;

        try {
            String rowNullCheck = String.valueOf(mdao.selectUserSolvingRow(udDTO));
            if(!(rowNullCheck.isEmpty())){
                result = mdao.selectUserSolvingRow(udDTO);
            }
        }catch (BindingException e){
            log.info(e.getMessage());
        }

        return result;
    }

    //사용자가 푼 dot들의 List 반환. / 색칠해주려고 사용.
    @RequestMapping(value = ("/api/selectSolvedDotId/{userId}/{nonoId}"), produces = "application/json; charset=utf-8")
    @ResponseBody
    public List<UserDotDTO> selectSolvedDotId(UserDotDTO udDTO){
        List<UserDotDTO> udDTOList = new ArrayList<>();
        udDTOList = mdao.selectSolvedDotId(udDTO);

        return udDTOList;
    }

    @RequestMapping(value = ("/api/updateisSolved/{userId}/{nonoId}"), method = RequestMethod.POST)
    @ResponseBody
    public String updateIsSolved(UserNonoDTO unDTO){
        log.info(getClass().getName() + ": updateIsSolved start!!!!!");
        String msg ="";
        mdao.updateUserNonoIsSolved(unDTO);
        msg = "성공";
        return msg;
    }

    @GetMapping("/nonobox")
    public String getIngUserNono(Model model) {
    List<UserNonoVO> userNonnolist = mdao.selectAllNoNo();
//        List<UserNonoDTO> nonoList = mainMapper.selectUserNono(userId);
//        System.out.println(userNonnolist.get(0).getUserNonoId());
        model.addAttribute("nonoList", userNonnolist);

        return "/nonobox";
    }
    @GetMapping(value = "/nonobox/{levelType}")
    public String getIngUserNono(@PathVariable(value = "levelType")int levelType, Model model) {
        List<UserNonoVO> userNonnolist = mdao.selectNonoByLevel(levelType);
        log.info(userNonnolist.get(0).toString());
//        List<UserNonoDTO> nonoList = mainMapper.selectUserNono(userId);
//        System.out.println(userNonnolist.get(0).getUserNonoId());
          model.addAttribute("nonoList", userNonnolist);

        return "/nonobox";
    }

    @GetMapping("/missionListbuny")
    @ResponseBody
    public String missionListbuny(){
        int [] pros ={1000, 1001, 1008, 1271, 1330, 1809, 2338, 2372, 2377, 2393, 2420, 2438, 2475, 2557, 2558, 2738, 2739, 2741, 2743, 2744, 2753, 2754, 3003, 3733, 4101, 4999, 5337, 5338, 5339, 5341, 5522, 5597, 6840, 7287, 7891, 8370, 8393, 8437, 8545, 8871, 9086, 9498, 9653, 9654, 10170, 10171, 10172, 10189, 10430, 10699, 10718, 10757, 10807, 10869, 10871, 10872, 10926, 10950, 10951, 10952, 10998, 11021, 11022, 11382, 11654, 11718, 11942, 13277, 14337, 14581, 14645, 14652, 14681, 14928, 15000, 15680, 15727, 15733, 15740, 15962, 15963, 15964, 16099, 16170, 16394, 16430, 17256, 18096, 18108, 18301, 18409, 20254, 20492, 21300, 21598, 22193, 23234, 23235, 24078, 24082};
        int proslen = pros.length;
        StringBuilder sb = new StringBuilder();

        for(int i=0; i<48; i++){
            sb.append(String.valueOf(pros[i])).append(",");
        }


        return sb.toString();
    }
    @GetMapping("/missionListBronze")
    @ResponseBody
    public String missionList(){
        int [] pros ={1085, 1247, 1267, 1284, 1547, 1598, 1703, 1837, 2010, 2061, 2321, 2387, 2441, 2442, 2443, 2444, 2445, 2446, 2455, 2460, 2476, 2490, 2501, 2506, 2522, 2523, 2525, 2547, 2562, 2566, 2576, 2588, 2712, 2720, 2721, 2765, 2783, 2857, 2863, 2875, 2884, 2903, 2914, 2921, 2935, 2953, 2959, 2965, 2975, 2985, 2991, 2997, 3004, 3009, 3029, 3034, 3047, 3053, 3058, 3059, 3276, 3460, 3507, 3512, 3533, 3554, 3578, 4084, 4153, 4388, 4435, 4458, 4459, 4493, 4504, 4562, 4619, 4635, 4655, 4690, 4706, 4740, 4758, 4766, 4806, 4850, 4880, 4892, 4909, 4922, 5013, 5063, 5073, 5074, 5086, 5101, 5102, 5157, 5163, 5217, 5220, 5235, 5246, 5292, 5340, 5342, 5343, 5354, 5356, 5361, 5365, 5497, 5523, 5565, 5607, 5612, 5613, 5666, 5691, 5692, 5724, 5751, 5753, 5789, 5893, 5949, 5988, 6030, 6131, 6162, 6190, 6249, 6321, 6322, 6378, 6436, 6437, 6491, 6721, 6750, 6768, 6779, 6780, 6784, 6794, 6812, 6830, 6845, 6856, 6889, 6903, 6974, 6975, 7130, 7168, 7181, 7240, 7279, 7280, 7281, 7510, 7523, 7581, 7782, 7947, 8371, 8387, 8574, 8658, 8661, 8678, 8714, 8718, 8719, 8721, 8725, 8794, 8806, 8815, 8826, 8932, 9063, 9085, 9094, 9161, 9286, 9288, 9295, 9297, 9298, 9299, 9306, 9310, 9317, 9325, 9366, 9428, 9443, 9469, 9493, 9501, 9517, 9550, 9610, 9622, 9635, 9664, 9698, 9699, 9713, 9723, 9724, 9771, 9773, 9776, 9783, 9806, 9838, 9848, 9907, 9924, 9945, 9950, 10102, 10103, 10162, 10178, 10179, 10180, 10185, 10187, 10205, 10214, 10250, 10312, 10395, 10406, 10409, 10419, 10474, 10569, 10599, 10693, 10695, 10698, 10707, 10810, 10817, 10818, 10824, 10833, 10865, 10886, 10902, 10953, 10984, 10987, 10988, 10990, 10991, 10992, 10995, 11006, 11023, 11024, 11034, 11109, 11131, 11134, 11161, 11176, 11258, 11295, 11312, 11320, 11367, 11368, 11434, 11466, 11520, 11522, 11586, 11648, 11719, 11721, 11759, 11772, 11795, 11800, 11874, 11908, 11966, 11970, 12250, 12351, 12352, 12571, 12756, 12790, 12840, 13063, 13073, 13129, 13221, 13222, 13223, 13225, 13228, 13236, 13240, 13297, 13311, 13363, 13416, 13484, 13528, 13610, 13617, 13667, 13670, 13684, 13698, 13773, 13871, 14013, 14075, 14173, 14182, 14215, 14264, 14535, 14541, 14545, 14568, 14579, 14592, 14656, 14682, 14683, 14720, 14761, 14782, 14909, 14913, 14920, 15001, 15036, 15079, 15083, 15096, 15151, 15178, 15179, 15236, 15238, 15272, 15279, 15295, 15340, 15354, 15415, 15429, 15633, 15667, 15734, 15751, 15780, 15781, 15784, 15818, 15820, 15858, 15894, 15917, 15921, 15923, 15953, 16088, 16175, 16239, 16316, 16427, 16428, 16431, 16445, 16479, 16483, 16503, 16504, 16546, 16625, 16673, 16785, 16861, 17010, 17042, 17094, 17174, 17210, 17263, 17284, 17350, 17450, 17496, 17530, 17548, 17588, 17598, 17614, 17618, 17783, 17869, 17884, 17912, 17924, 17944, 17945, 18005, 18063, 18127, 18247, 18309, 18412, 18813, 18856, 18883, 18964, 19572, 19751, 19771, 19774, 19786, 19796, 19963, 20017, 20053, 20268, 20282, 20332, 20336, 20359, 20360, 20361, 20374, 20410, 20473, 20540, 20674, 20877, 20944, 21022, 21105, 21146, 21167, 21185, 21197, 21200, 21212, 21280, 21312, 21339, 21420, 21507, 21553, 21573, 21603, 21614, 21645, 21679, 21866, 21983, 22061, 22093, 22123, 22150, 22279, 22380, 22388, 22396, 22421, 22938, 23080, 23103, 23303, 23343, 23348, 23375, 23397, 23530, 23663, 23794, 23802, 23803, 23804, 23805, 23806, 23808, 23809, 23810, 23811, 23812, 23925, 23971, 23972, 24084, 24198, 24264, 24265, 24266, 24296, 24302, 24310, 24311, 24312, 24333, 24348, 24349, 24387, 24408, 24569, 24603, 24606, 24609, 24623, 24724, 24768, 24783, 24803, 24805, 24807, 24830, 24867, 24871, 24923, 25024, 25084, 25175, 25270, 25277, 25278, 25285, 25286, 25527, 25629, 25630, 25641, 25642, 25703, 25756, 25774, 25785, 25786, 25801, 25812, 25813, 25814, 25815, 25829, 25830, 25840, 25841, 25849, 25850, 25869, 25870, 25904, 25915, 25933, 25965, 25985, 26004, 26026, 26027, 26040, 26145, 26198, 26264, 26314, 26392, 26432, 26502, 26509, 26510, 26535, 26547, 26548, 26550, 26560, 26564, 26583, 26594, 26645, 26714, 26741, 26752, 26849, 26863, 26906, 26933, 26940};
        int proslen = pros.length;
        StringBuilder sb = new StringBuilder();


        for(int i=136; i<178; i++){//5개
            sb.append(String.valueOf(pros[i])).append(",");
        }


        return sb.toString();
    }

    @GetMapping("/missionListSilver")
    @ResponseBody
    public String missionListSilver(){//3개
        int [] pros = {1015, 1018, 1026, 1049, 1057, 1059, 1064, 1065, 1120, 1158, 1205, 1235, 1244, 1246, 1269, 1302, 1331, 1337, 1358, 1359, 1388, 1487, 1491, 1544, 1590, 1620, 1622, 1639, 1680, 1740, 1748, 1755, 1758, 1764, 1812, 1822, 1835, 1862, 1895, 1907, 1920, 1925, 1940, 1969, 1980, 1985, 2003, 2029, 2034, 2090, 2164, 2217, 2223, 2331, 2358, 2417, 2422, 2485, 2491, 2567, 2578, 2670, 2678, 2766, 2776, 2799, 2811, 2839, 2840, 2847, 2865, 2870, 2936, 2960, 2980, 3022, 3036, 3048, 3097, 3100, 3152, 3213, 3251, 3254, 3277, 3285, 3340, 3443, 3451, 3518, 3532, 3842, 3986, 4096, 4119, 4126, 4134, 4137, 4154, 4166, 4197, 4236, 4259, 4279, 4282, 4300, 4309, 4313, 4322, 4340, 4353, 4363, 4368, 4389, 4391, 4394, 4396, 4406, 4411, 4423, 4426, 4466, 4475, 4508, 4540, 4548, 4598, 4621, 4628, 4668, 4674, 4676, 4771, 4801, 4836, 4839, 4865, 4881, 4911, 4921, 4949, 4980, 4981, 4988, 4992, 5059, 5104, 5115, 5172, 5221, 5230, 5247, 5346, 5366, 5390, 5399, 5437, 5443, 5534, 5560, 5568, 5591, 5609, 5614, 5623, 5637, 5667, 5680, 5688, 5705, 5716, 5723, 5756, 5763, 5766, 5787, 5801, 5883, 5930, 5966, 5967, 5985, 5991, 6001, 6053, 6056, 6077, 6092, 6111, 6127, 6148, 6149, 6165, 6186, 6187, 6203, 6230, 6245, 6270, 6312, 6341, 6513, 6514, 6516, 6518, 6537, 6538, 6545, 6634, 6640, 6666, 6683, 6705, 6746, 6754, 6770, 6781, 6826, 6827, 6861, 6863, 6906, 6931, 6954, 6959, 6973, 7095, 7114, 7121, 7159, 7222, 7224, 7238, 7304, 7374, 7387, 7397, 7459, 7515, 7530, 7532, 7564, 7585, 7587, 7640, 7683, 7693, 7800, 7801, 7803, 7830, 7846, 7847, 7848, 8029, 8073, 8261, 8362, 8419, 8529, 8544, 8575, 8600, 8607, 8608, 8609, 8625, 8641, 8662, 8666, 8667, 8673, 8675, 8680, 8682, 8726, 8737, 8761, 8762, 8773, 8795, 8808, 8819, 8891, 8896, 8922, 8976, 9012, 9117, 9172, 9215, 9242, 9280, 9290, 9291, 9309, 9322, 9357, 9372, 9399, 9400, 9414, 9417, 9442, 9471, 9479, 9491, 9507, 9575, 9609, 9612, 9613, 9631, 9656, 9693, 9728, 9770, 9780, 9787, 9819, 9830, 9834, 9842, 9843, 9855, 9973, 9981, 10085, 10139, 10157, 10184, 10209, 10211, 10225, 10261, 10328, 10342, 10353, 10378, 10432, 10459, 10489, 10495, 10546, 10594, 10604, 10610, 10656, 10657, 10738, 10765, 10773, 10774, 10816, 10825, 10828, 10845, 10866, 10882, 10892, 10897, 10981, 10994, 11029, 11039, 11047, 11086, 11125, 11142, 11187, 11254, 11270, 11289, 11315, 11344, 11345, 11366, 11371, 11399, 11419, 11502, 11507, 11508, 11538, 11558, 11564, 11582, 11652, 11656, 11785, 11815, 11916, 11946, 11947, 11955, 11972, 12000, 12042, 12043, 12062, 12068, 12072, 12080, 12084, 12110, 12175, 12194, 12204, 12246, 12248, 12260, 12261, 12266, 12267, 12268, 12331, 12336, 12409, 12413, 12491, 12493, 12503, 12512, 12513, 12590, 12597, 12598, 12599, 12641, 12683, 12709, 12712, 12724, 12725, 12755, 12782, 12788, 12873, 12927, 12971, 12981, 13015, 13047, 13116, 13170, 13217, 13226, 13229, 13243, 13268, 13411, 13413, 13472, 13473, 13527, 13567, 13594, 13635, 13676, 13693, 13699, 13706, 13718, 13732, 13733, 13764, 13836, 13845, 13900, 13923, 13986, 14008, 14010, 14042, 14113, 14140, 14244, 14291, 14292, 14315, 14355, 14357, 14375, 14381, 14382, 14383, 14387, 14394, 14397, 14402, 14455, 14468, 14469, 14495, 14536, 14584, 14594, 14602, 14612, 14670, 14680, 14753, 14762, 14767, 14783, 14911, 14936, 14984, 15017, 15088, 15118, 15120, 15198, 15233, 15282, 15287, 15360, 15387, 15407, 15419, 15426, 15430, 15436, 15489, 15577, 15624, 15725, 15736, 15761, 15763, 15788, 15828, 15830, 15832, 15970, 16006, 16086, 16162, 16173, 16177, 16179, 16200, 16237, 16261, 16293, 16300, 16439, 16450, 16460, 16471, 16488, 16499, 16524, 16609, 16666, 16677, 16689, 16692, 16738, 16850, 16951, 16960, 17028, 17057, 17164, 17198, 17203, 17219, 17254, 17262, 17266, 17287, 17296, 17357, 17419, 17521, 17572, 17637, 17756, 17797, 17847, 17858, 17870, 17891, 17894, 17901, 17906, 17938, 17968, 17998, 18009, 18018, 18100, 18101, 18110, 18209, 18258, 18294, 18295, 18332, 18384, 18422, 18688, 18881, 18987, 19025, 19179, 19607, 19636, 19768, 19769, 19775, 19780, 19788, 19805, 19844, 19874, 19878, 19879, 19887, 19939, 19957, 19971, 19981, 20004, 20029, 20044, 20095, 20125, 20244, 20273, 20363, 20381, 20382, 20388, 20436, 20458, 20470, 20493, 20502, 20507, 20548, 20551, 20569, 20732, 20750, 20762, 20835, 20856, 20857, 20868, 20937, 21047, 21198, 21361, 21417, 21437, 21554, 21557, 21597, 21650, 21680, 21704, 21716, 21748, 21885, 21920, 22017, 22035, 22062, 22242, 22243, 22246, 22285, 22290, 22291, 22332, 22333, 22334, 22335, 22336, 22338, 22351, 22369, 22531, 22548, 22549, 22637, 22657, 22788, 22934, 22993, 23038, 23056, 23076, 23301, 23305, 23391, 23394, 23516, 23534, 23717, 23731, 23785, 23826, 23827, 23842, 23914, 23967, 24061, 24199, 24293, 24300, 24301, 24308, 24314, 24315, 24331, 24362, 24364, 24371, 24407, 24417, 24418, 24431, 24448, 24465, 24494, 24498, 24499, 24571, 24605, 24624, 24626, 24771, 24793, 24811, 24839, 24847, 24852, 24875, 24924, 24928, 24933, 25039, 25044, 25085, 25089, 25153, 25179, 25184, 25185, 25192, 25204, 25214, 25275, 25287, 25288, 25329, 25338, 25344, 25379, 25426, 25449, 25465, 25550, 25694, 25706, 25746, 25776, 25818, 25842, 25873, 25882, 25943, 25955, 25972, 26022, 26031, 26043, 26060, 26069, 26070, 26083, 26099, 26123, 26168, 26257, 26295, 26317, 26433, 26496, 26558, 26587, 26596, 26700, 26753, 26770, 26778, 26876};
        int proslen = pros.length;
        StringBuilder sb = new StringBuilder();


        for(int i=71; i<122; i++){
            sb.append(String.valueOf(pros[i])).append(",");
        }


        return sb.toString();
    }

    @GetMapping("/missionListGold")
    @ResponseBody
    public String missionListGold(){//3개
        int [] pros = {1005, 1022, 1030, 1069, 1082, 1099, 1111, 1132, 1153, 1238, 1248, 1278, 1301, 1304, 1318, 1332, 1341, 1379, 1414, 1423, 1460, 1481, 1493, 1516, 1519, 1520, 1540, 1566, 1580, 1600, 1613, 1621, 1640, 1644, 1656, 1670, 1687, 1695, 1701, 1719, 1726, 1750, 1774, 1795, 1808, 1810, 1823, 1833, 1843, 1865, 1885, 1888, 1902, 1937, 1939, 1941, 1943, 1947, 1958, 1959, 2024, 2035, 2045, 2058, 2069, 2091, 2109, 2128, 2131, 2143, 2146, 2151, 2158, 2186, 2206, 2216, 2218, 2228, 2234, 2248, 2252, 2273, 2281, 2306, 2314, 2327, 2335, 2342, 2354, 2363, 2378, 2381, 2403, 2406, 2457, 2473, 2482, 2492, 2513, 2528, 2533, 2539, 2550, 2560, 2571, 2572, 2616, 2623, 2629, 2638, 2648, 2655, 2686, 2691, 2694, 2708, 2723, 2733, 2737, 2773, 2778, 2791, 2812, 2829, 2830, 2836, 2854, 2879, 2900, 2904, 2931, 2963, 3075, 3101, 3110, 3165, 3192, 3194, 3195, 3233, 3236, 3240, 3257, 3261, 3291, 3293, 3296, 3353, 3376, 3399, 3439, 3484, 3485, 3494, 3522, 3594, 3614, 3635, 3661, 3663, 3673, 3689, 3691, 3695, 3751, 3782, 3805, 3806, 3897, 3908, 3910, 3919, 3962, 3981, 4018, 4029, 4041, 4064, 4066, 4099, 4100, 4146, 4148, 4156, 4167, 4168, 4170, 4171, 4175, 4184, 4185, 4257, 4258, 4265, 4276, 4278, 4294, 4306, 4343, 4367, 4372, 4386, 4387, 4430, 4439, 4457, 4507, 4545, 4550, 4554, 4557, 4561, 4577, 4648, 4665, 4671, 4722, 4762, 4829, 4842, 4843, 4866, 4874, 4882, 4907, 4970, 4994, 5003, 5015, 5017, 5067, 5124, 5154, 5180, 5194, 5240, 5242, 5297, 5380, 5382, 5405, 5431, 5458, 5502, 5504, 5536, 5540, 5562, 5610, 5624, 5625, 5649, 5654, 5696, 5737, 5771, 5831, 5832, 5847, 5854, 5858, 5873, 5875, 5900, 5903, 5926, 5927, 5936, 5937, 5945, 5954, 5960, 5973, 5994, 6002, 6015, 6025, 6038, 6057, 6072, 6086, 6087, 6094, 6166, 6167, 6184, 6209, 6234, 6328, 6340, 6354, 6362, 6363, 6381, 6384, 6386, 6454, 6482, 6509, 6521, 6525, 6534, 6586, 6590, 6592, 6595, 6597, 6605, 6636, 6658, 6682, 6690, 6701, 6707, 6747, 6775, 6787, 6801, 6808, 6885, 6896, 6945, 6952, 6957, 6968, 6969, 6982, 6985, 7006, 7017, 7026, 7037, 7045, 7111, 7155, 7211, 7228, 7230, 7268, 7271, 7339, 7356, 7358, 7382, 7408, 7432, 7439, 7461, 7467, 7512, 7522, 7535, 7539, 7558, 7570, 7573, 7579, 7624, 7654, 7690, 7691, 7694, 7695, 7767, 7775, 7806, 7881, 7882, 7894, 7922, 7960, 7989, 8027, 8063, 8071, 8088, 8100, 8120, 8142, 8300, 8342, 8347, 8397, 8541, 8553, 8561, 8583, 8584, 8602, 8605, 8639, 8640, 8739, 8746, 8798, 8822, 8850, 8894, 8905, 8913, 8972, 8982, 9010, 9025, 9028, 9061, 9077, 9114, 9121, 9122, 9139, 9168, 9199, 9203, 9274, 9279, 9303, 9320, 9326, 9344, 9347, 9356, 9361, 9363, 9369, 9393, 9411, 9466, 9470, 9567, 9597, 9639, 9644, 9694, 9716, 9741, 9797, 9832, 9840, 9869, 9879, 9944, 9983, 9988, 9994, 9997, 9998, 10012, 10021, 10045, 10072, 10096, 10199, 10207, 10229, 10290, 10297, 10314, 10349, 10411, 10416, 10440, 10478, 10504, 10517, 10520, 10522, 10547, 10573, 10590, 10612, 10613, 10624, 10652, 10653, 10659, 10674, 10680, 10722, 10723, 10725, 10851, 10858, 10879, 10887, 10986, 11049, 11062, 11066, 11076, 11085, 11089, 11108, 11120, 11167, 11245, 11334, 11336, 11437, 11445, 11449, 11451, 11473, 11489, 11562, 11577, 11616, 11627, 11630, 11632, 11641, 11666, 11690, 11692, 11766, 11769, 11779, 11787, 11791, 11812, 11853, 11862, 11876, 11877, 11881, 11883, 11917, 11957, 11965, 11975, 11997, 12002, 12006, 12045, 12055, 12066, 12070, 12095, 12107, 12152, 12163, 12170, 12197, 12214, 12238, 12256, 12270, 12272, 12273, 12284, 12312, 12342, 12367, 12397, 12405, 12415, 12445, 12451, 12454, 12564, 12574, 12633, 12643, 12644, 12663, 12684, 12687, 12697, 12727, 12744, 12757, 12764, 12781, 12784, 12902, 12903, 12905, 12906, 12914, 12923, 12945, 12946, 12956, 12966, 12978, 12996, 13002, 13056, 13103, 13151, 13154, 13168, 13194, 13199, 13247, 13253, 13255, 13257, 13290, 13294, 13314, 13317, 13325, 13356, 13365, 13418, 13529, 13531, 13625, 13654, 13691, 13692, 13739, 13747, 13754, 13814, 13875, 13904, 13950, 13979, 14047, 14061, 14091, 14114, 14154, 14167, 14188, 14220, 14221, 14256, 14262, 14279, 14295, 14301, 14335, 14348, 14349, 14391, 14401, 14427, 14431, 14442, 14450, 14462, 14480, 14505, 14552, 14556, 14595, 14610, 14618, 14619, 14621, 14628, 14630, 14658, 14673, 14676, 14718, 14725, 14757, 14781, 14784, 14786, 14799, 14808, 14825, 14848, 14890, 14905, 14943, 14947, 14950, 14956, 15031, 15033, 15046, 15072, 15094, 15100, 15127, 15133, 15196, 15230, 15451, 15452, 15462, 15483, 15487, 15509, 15520, 15551, 15569, 15573, 15625, 15684, 15685, 15711, 15772, 15790, 15822, 15831, 15854, 15912, 15919, 15926, 15938, 15976, 15997, 15998, 15999, 16064, 16107, 16115, 16144, 16167, 16190, 16202, 16207, 16209, 16228, 16235, 16236, 16288, 16302, 16327, 16376, 16377, 16386, 16405, 16437, 16438, 16441, 16523, 16571, 16619, 16637, 16724, 16765, 16788, 16789, 16821, 16870, 16884, 16894, 16919, 16932, 16934, 16940, 16942, 16947, 16954, 16964, 16971, 16986, 16988, 17044, 17053, 17054, 17090, 17099, 17135, 17142, 17181, 17182, 17215, 17268, 17270, 17299, 17307, 17349, 17370, 17386, 17432, 17436, 17480, 17490, 17491, 17497, 17546, 17549, 17552, 17557, 17565, 17591, 17594, 17616, 17619, 17622, 17745, 17768, 17779, 17789, 17812, 17816, 17821, 17841, 17856, 17898, 17935, 17976, 17981, 17984, 18039, 18082, 18092, 18093, 18132, 18170, 18234, 18235, 18239, 18244, 18305, 18324, 18431, 18432, 18466, 18546, 18606, 18611, 18680, 18707, 18713, 18768, 18780, 18808, 18858, 18877, 18886, 19128, 19227, 19241, 19321, 19494, 19535, 19542, 19576, 19582, 19584, 19591, 19623, 19791, 19834, 19918, 19989, 20005, 20026, 20057, 20058, 20083, 20099, 20118, 20120, 20129, 20142, 20160, 20173, 20182, 20187, 20201, 20209, 20221, 20249, 20253, 20269, 20303, 20313, 20333, 20354, 20358, 20366, 20419, 20440, 20459, 20460, 20542, 20544, 20572, 20647, 20666, 20700, 20777, 20784, 20842, 20871, 20879, 20957, 21068, 21069, 21098, 21128, 21138, 21165, 21195, 21196, 21211, 21233, 21244, 21262, 21277, 21283, 21284, 21328, 21352, 21358, 21459, 21606, 21626, 21642, 21695, 21753, 21765, 21774, 21776, 21822, 21925, 21927, 21957, 22104, 22110, 22153, 22225, 22254, 22259, 22405, 22414, 22442, 22443, 22476, 22502, 22505, 22507, 22567, 22570, 22578, 22595, 22636, 22666, 22693, 22732, 22844, 22846, 22859, 22860, 22866, 22868, 22880, 22890, 22896, 22927, 22931, 22944, 22955, 22964, 23001, 23007, 23032, 23040, 23058, 23061, 23075, 23084, 23104, 23128, 23222, 23237, 23257, 23265, 23280, 23286, 23288, 23295, 23302, 23307, 23326, 23327, 23353, 23354, 23364, 23378, 23506, 23538, 23545, 23563, 23582, 23616, 23633, 23671, 23733, 23792, 23801, 23807, 23816, 23828, 23831, 23845, 23848, 23865, 23879, 23890, 23896, 23897, 23900, 23906, 23974, 23976, 24010, 24093, 24108, 24112, 24114, 24141, 24143, 24146, 24161, 24337, 24394, 24395, 24401, 24409, 24430, 24450, 24453, 24456, 24513, 24525, 24538, 24548, 24551, 24555, 24559, 24563, 24572, 24574, 24600, 24620, 24678, 24700, 24727, 24748, 24778, 24779, 24781, 24810, 24826, 24844, 24850, 24921, 24940, 24980, 25040, 25047, 25049, 25056, 25077, 25115, 25136, 25142, 25174, 25188, 25197, 25237, 25240, 25255, 25279, 25307, 25309, 25332, 25339, 25341, 25368, 25395, 25420, 25435, 25467, 25482, 25529, 25543, 25547, 25587, 25588, 25598, 25604, 25636, 25690, 25789, 25826, 25832, 25835, 25886, 25921, 25953, 25969, 26000, 26035, 26048, 26054, 26055, 26073, 26086, 26093, 26110, 26112, 26125, 26216, 26430, 26603, 26607, 26652, 26740, 26758, 26760, 26763, 26887, 26937, 26976, 26998, 27006, 27038, 27043, 27067, 27192, 27212, 27217, 27280, 27314, 27377, 27384, 27448, 27476, 27498, 27502, 27516, 27534, 27536, 27544, 27560, 27577, 27594, 27603, 27610, 27623, 27651, 27697, 27777, 27838, 27869, 27878, 27893};
        int proslen = pros.length;
        StringBuilder sb = new StringBuilder();


        for(int i=78; i<126; i++){//3개
            sb.append(String.valueOf(pros[i])).append(",");
        }


        return sb.toString();
    }

    @GetMapping("/missionListPlatinum")
    @ResponseBody
    public String missionListPlatinum(){//3개
        int [] pros = {1006, 1017, 1023, 1044, 1055, 1073, 1093, 1096, 1104, 1108, 1109, 1121, 1126, 1129, 1147, 1151, 1161, 1168, 1170, 1201, 1249, 1258, 1265, 1273, 1289, 1293, 1294, 1310, 1314, 1315, 1395, 1401, 1426, 1479, 1514, 1523, 1533, 1536, 1556, 1573, 1574, 1585, 1586, 1602, 1605, 1648, 1657, 1671, 1746, 1751, 1752, 1754, 1760, 1762, 1767, 1785, 1804, 1824, 1825, 1867, 1906, 2007, 2027, 2032, 2049, 2094, 2095, 2105, 2122, 2126, 2152, 2184, 2192, 2215, 2256, 2279, 2315, 2316, 2326, 2329, 2330, 2361, 2365, 2385, 2392, 2397, 2414, 2416, 2449, 2465, 2496, 2497, 2498, 2507, 2598, 2647, 2679, 2709, 2724, 2782, 2787, 2802, 2807, 2808, 2813, 2820, 2838, 2843, 2855, 2861, 2868, 2873, 2882, 2888, 2944, 2968, 2969, 2984, 2989, 3007, 3033, 3038, 3044, 3045, 3057, 3073, 3148, 3159, 3219, 3225, 3297, 3299, 3317, 3318, 3345, 3346, 3368, 3370, 3434, 3479, 3525, 3528, 3548, 3565, 3582, 3598, 3605, 3612, 3641, 3648, 3659, 3667, 3675, 3676, 3700, 3713, 3736, 3737, 3794, 3830, 3882, 3946, 3995, 4017, 4040, 4092, 4106, 4204, 4219, 4224, 4225, 4240, 4243, 4341, 4390, 4451, 4463, 4484, 4503, 4546, 4555, 4645, 4681, 4743, 4792, 4862, 5000, 5010, 5019, 5025, 5037, 5056, 5070, 5178, 5202, 5209, 5227, 5234, 5264, 5388, 5446, 5450, 5461, 5467, 5479, 5498, 5541, 5553, 5573, 5620, 5689, 5695, 5780, 5804, 5834, 5842, 5851, 5879, 5888, 5896, 5908, 5915, 5924, 5951, 5977, 5981, 5997, 6000, 6043, 6049, 6101, 6150, 6155, 6200, 6210, 6253, 6275, 6291, 6444, 6496, 6569, 6613, 6672, 6758, 6805, 6854, 6940, 7003, 7036, 7053, 7058, 7112, 7150, 7154, 7156, 7162, 7293, 7384, 7412, 7428, 7446, 7473, 7537, 7634, 7644, 7673, 7732, 7741, 7872, 7929, 7949, 7971, 7996, 8032, 8040, 8103, 8127, 8129, 8145, 8149, 8176, 8189, 8203, 8209, 8218, 8225, 8230, 8234, 8239, 8240, 8268, 8318, 8330, 8352, 8557, 8623, 8694, 8852, 8854, 8877, 8902, 8903, 9022, 9034, 9200, 9240, 9248, 9249, 9270, 9331, 9345, 9427, 9452, 9477, 9496, 9497, 9521, 9525, 9542, 9577, 9588, 9592, 9666, 9667, 9668, 9732, 9735, 9737, 9876, 9938, 10003, 10019, 10020, 10034, 10074, 10099, 10108, 10111, 10121, 10122, 10220, 10227, 10245, 10248, 10276, 10279, 10293, 10327, 10371, 10382, 10475, 10479, 10532, 10533, 10542, 10548, 10559, 10593, 10650, 10670, 10700, 10777, 10803, 10849, 10850, 10877, 10883, 10891, 10894, 10901, 10907, 10937, 10961, 11016, 11028, 11041, 11096, 11097, 11102, 11191, 11216, 11219, 11223, 11239, 11268, 11281, 11373, 11377, 11378, 11405, 11407, 11408, 11409, 11475, 11480, 11500, 11543, 11546, 11551, 11590, 11591, 11621, 11629, 11647, 11669, 11677, 11683, 11733, 11744, 11749, 11752, 11842, 11854, 11872, 11873, 11960, 12016, 12049, 12135, 12159, 12247, 12258, 12306, 12341, 12406, 12423, 12424, 12490, 12515, 12516, 12547, 12582, 12648, 12667, 12682, 12692, 12700, 12710, 12843, 12844, 12894, 12895, 12957, 12963, 12973, 13026, 13034, 13053, 13089, 13098, 13134, 13137, 13197, 13200, 13264, 13299, 13303, 13327, 13339, 13364, 13429, 13435, 13448, 13467, 13470, 13476, 13479, 13489, 13504, 13505, 13511, 13533, 13537, 13541, 13544, 13656, 13709, 13749, 13790, 13793, 13806, 13840, 13863, 13867, 13891, 13894, 13896, 13906, 13960, 13962, 14057, 14069, 14077, 14148, 14255, 14261, 14268, 14276, 14282, 14286, 14287, 14288, 14305, 14340, 14372, 14398, 14399, 14407, 14420, 14458, 14475, 14522, 14525, 14571, 14577, 14611, 14672, 14688, 14701, 14744, 14748, 14752, 14778, 14787, 14801, 14831, 14851, 14933, 14959, 14962, 14967, 14980, 14986, 14996, 14998, 15005, 15013, 15028, 15037, 15039, 15053, 15058, 15093, 15102, 15103, 15213, 15250, 15273, 15325, 15337, 15352, 15357, 15391, 15396, 15402, 15420, 15421, 15424, 15457, 15471, 15478, 15479, 15484, 15491, 15503, 15515, 15534, 15535, 15541, 15580, 15588, 15677, 15706, 15713, 15714, 15718, 15759, 15775, 15825, 15850, 15909, 15928, 15934, 15945, 15972, 15982, 16056, 16068, 16108, 16153, 16187, 16325, 16340, 16404, 16415, 16444, 16453, 16529, 16532, 16578, 16607, 16660, 16700, 16726, 16734, 16745, 16794, 16838, 16853, 16875, 16877, 16886, 16899, 16903, 16905, 16909, 16915, 16930, 17007, 17034, 17076, 17100, 17147, 17184, 17221, 17227, 17230, 17233, 17238, 17239, 17306, 17315, 17327, 17361, 17365, 17402, 17407, 17408, 17415, 17417, 17421, 17448, 17469, 17493, 17512, 17515, 17522, 17568, 17634, 17685, 17716, 17720, 17748, 17782, 17805, 17862, 17900, 17934, 17948, 17986, 18050, 18094, 18139, 18143, 18174, 18182, 18191, 18202, 18208, 18216, 18217, 18226, 18227, 18241, 18264, 18266, 18286, 18287, 18296, 18317, 18339, 18340, 18358, 18373, 18407, 18425, 18437, 18504, 18530, 18543, 18558, 18591, 18619, 18636, 18687, 18689, 18725, 18727, 18781, 18817, 18919, 18937, 19034, 19052, 19073, 19096, 19114, 19135, 19159, 19202, 19218, 19249, 19280, 19282, 19287, 19290, 19304, 19347, 19359, 19454, 19474, 19559, 19569, 19585, 19608, 19610, 19629, 19631, 19643, 19648, 19679, 19724, 19727, 19749, 19931, 20093, 20101, 20102, 20103, 20123, 20178, 20203, 20220, 20236, 20261, 20264, 20289, 20295, 20307, 20308, 20314, 20328, 20421, 20450, 20519, 20521, 20537, 20545, 20550, 20560, 20629, 20630, 20631, 20635, 20670, 20686, 20688, 20692, 20701, 20869, 20880, 20904, 20919, 20934, 20945, 20967, 20985, 20995, 20998, 21004, 21015, 21025, 21029, 21036, 21038, 21062, 21090, 21091, 21103, 21125, 21158, 21162, 21174, 21179, 21186, 21210, 21239, 21305, 21332, 21337, 21342, 21393, 21566, 21620, 21632, 21635, 21637, 21725, 21740, 21759, 21767, 21807, 21814, 21815, 21838, 21850, 21899, 21928, 21952, 21970, 21984, 21988, 22008, 22020, 22038, 22042, 22204, 22205, 22265, 22271, 22344, 22402, 22441, 22449, 22457, 22458, 22466, 22499, 22522, 22620, 22660, 22671, 22713, 22748, 22908, 22961, 22972, 22975, 22976, 22980, 23002, 23018, 23043, 23066, 23078, 23106, 23139, 23177, 23179, 23204, 23270, 23283, 23287, 23297, 23298, 23308, 23355, 23386, 23403, 23498, 23509, 23569, 23571, 23617, 23678, 23735, 23744, 23752, 23755, 23765, 23773, 23834, 23894, 23912, 23988, 24031, 24043, 24097, 24109, 24127, 24147, 24172, 24242, 24256, 24271, 24276, 24397, 24406, 24433, 24455, 24457, 24458, 24473, 24491, 24515, 24520, 24530, 24540, 24541, 24575, 24587, 24588, 24590, 24598, 24619, 24656, 24659, 24688, 24737, 24812, 24836, 24873, 24874, 24932, 24941, 24966, 24992, 25026, 25032, 25051, 25052, 25117, 25211, 25231, 25244, 25259, 25269, 25271, 25273, 25317, 25321, 25380, 25409, 25530, 25537, 25548, 25549, 25567, 25623, 25666, 25671, 25748, 25761, 25809, 25811, 25847, 25848, 25923, 25924, 25925, 25926, 25928, 25929, 25964, 25973, 25999, 26001, 26012, 26033, 26038, 26080, 26088, 26089, 26105, 26128, 26135, 26151, 26157, 26158, 26165, 26181, 26219, 26262, 26269, 26270, 26306, 26413, 26519, 26526, 26611, 26612, 26640, 26657, 26788, 26824, 26833, 26835, 26836, 26867, 26869};
        int proslen = pros.length;
        StringBuilder sb = new StringBuilder();


        for(int i=80; i<128; i++){//3개
            sb.append(String.valueOf(pros[i])).append(",");
        }


        return sb.toString();
    }


    ////////////////////////////////////////////내가 선언한 메서드/////////////////////////////////////////////////////////////

    //레벨 의 문제 수
    public int getNumPerLevel(int level) throws IOException {
        AsyncHttpClient getNumPerLevelClient = new DefaultAsyncHttpClient();
        String[] getNumResponseBody = new String[1];
        getNumPerLevelClient.prepare("GET", "https://solved.ac/api/v3/problem/level")
                .setHeader("Accept", "application/json")
                .execute()
                .toCompletableFuture()
                .thenAccept(response -> {
                    getNumResponseBody[0] = response.getResponseBody();
                    //System.out.println(getNumResponseBody[0]);
                })
                .join();
        getNumPerLevelClient.close();

        ObjectMapper getNumMapper = new ObjectMapper();
        JsonNode getNumJsonNode = getNumMapper.readTree(getNumResponseBody[0]);
        System.out.println(getNumJsonNode.get(level).get("count"));

        return getNumJsonNode.get(level).get("count").asInt();
    }

    //문제 레벨과 페이지 번호로 해당 레벨의 문제 번호,이름 뽑기
    public List<String> insertproblems(int num,int level) throws IOException {
        AsyncHttpClient getNumPerLevelClient = new DefaultAsyncHttpClient();
        String[] getNumResponseBody = new String[1];
        List<String> problemList = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        String url = "https://solved.ac/api/v3/search/problem?query=tier%3A"+level+"&page="+num;
        getNumPerLevelClient.prepare("GET", url)
                .setHeader("Accept", "application/json")
                .execute()
                .toCompletableFuture()
                .thenAccept(response -> {
                    getNumResponseBody[0] = response.getResponseBody();
                    //System.out.println(getNumResponseBody[0]);
                })
                .join();
        getNumPerLevelClient.close();

        ObjectMapper getNumMapper = new ObjectMapper();
        JsonNode getNumJsonNode = getNumMapper.readTree(getNumResponseBody[0]);

        for (int i=0; i<getNumJsonNode.get("items").size(); i++){
//            System.out.println("문제 이름 : " + getNumJsonNode.get("items").get(i).get("titleKo"));
//            System.out.println("문제 번호 : " + getNumJsonNode.get("items").get(i).get("problemId"));
            problemList.add(getNumJsonNode.get("items").get(i).get("problemId").asText());
            sb.append(getNumJsonNode.get("items").get(i).get("problemId")).append(",");
        }
        System.out.println(sb);

        //System.out.println(problemList);
        return problemList;
    }

    //백준 사용자 푼 문제 수 가져오기.
    public int getUserBaekData(String baekjoonId) {
        log.info(getClass().getName() + "getUserBackData start!!!!!!!");
//        String userId = "";
        //Scanner sc = new Scanner(System.in);
        //System.out.println("백준 아이디를 입력해주세요.");
        //System.out.print("아이디 : ");

        //userId = sc.next();
        //System.out.println("3초정도 소요됩니다.");

//        userId = "tmdgus5611";
        StringBuilder url = new StringBuilder();

        url.append("https://www.acmicpc.net/user/");
        url.append(baekjoonId);

        //Document에는 페이지의 전체 소스가 저장된다
        Document doc = null;

        try {
            doc = Jsoup.connect(url.toString()).get();
        } catch (IOException e) {
            e.printStackTrace();
        }

        //select를 이용하여 원하는 태그를 선택한다. select는 원하는 값을 가져오기 위한 중요한 기능이다.
        Element element = doc.select("div.problem-list").first(); // 맞은 문제
        //Element element = doc.select("div.problem-list").last(); // 시도했지만 맞지 못한 문제

        // System.out.println(element);

        System.out.println("========" + baekjoonId + "님이 맞힌 문제========");

        //Iterator을 사용하여 하나씩 값 가져오기
        Iterator<Element> ie1 = element.select("a").iterator();
        System.out.println("---맞힌 개수 : "+element.select("a").size());
        while (ie1.hasNext()) {
            System.out.println(ie1.next().text());
        }
        return element.select("a").size();
    }
}


